/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.thrift;
/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */


import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BatchMutateResult implements org.apache.thrift.TBase<BatchMutateResult, BatchMutateResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchMutateResult");

  private static final org.apache.thrift.protocol.TField DEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("deps", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField LTS_FIELD_DESC = new org.apache.thrift.protocol.TField("lts", org.apache.thrift.protocol.TType.I64, (short)2);

  public Set<Dep> deps; // required
  public long lts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPS((short)1, "deps"),
    LTS((short)2, "lts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPS
          return DEPS;
        case 2: // LTS
          return LTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LTS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPS, new org.apache.thrift.meta_data.FieldMetaData("deps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dep.class))));
    tmpMap.put(_Fields.LTS, new org.apache.thrift.meta_data.FieldMetaData("lts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "LamportTimestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchMutateResult.class, metaDataMap);
  }

  public BatchMutateResult() {
  }

  public BatchMutateResult(
    Set<Dep> deps,
    long lts)
  {
    this();
    this.deps = deps;
    this.lts = lts;
    setLtsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchMutateResult(BatchMutateResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetDeps()) {
      Set<Dep> __this__deps = new HashSet<Dep>();
      for (Dep other_element : other.deps) {
        __this__deps.add(new Dep(other_element));
      }
      this.deps = __this__deps;
    }
    this.lts = other.lts;
  }

  public BatchMutateResult deepCopy() {
    return new BatchMutateResult(this);
  }

  @Override
  public void clear() {
    this.deps = null;
    setLtsIsSet(false);
    this.lts = 0;
  }

  public int getDepsSize() {
    return (this.deps == null) ? 0 : this.deps.size();
  }

  public java.util.Iterator<Dep> getDepsIterator() {
    return (this.deps == null) ? null : this.deps.iterator();
  }

  public void addToDeps(Dep elem) {
    if (this.deps == null) {
      this.deps = new HashSet<Dep>();
    }
    this.deps.add(elem);
  }

  public Set<Dep> getDeps() {
    return this.deps;
  }

  public BatchMutateResult setDeps(Set<Dep> deps) {
    this.deps = deps;
    return this;
  }

  public void unsetDeps() {
    this.deps = null;
  }

  /** Returns true if field deps is set (has been assigned a value) and false otherwise */
  public boolean isSetDeps() {
    return this.deps != null;
  }

  public void setDepsIsSet(boolean value) {
    if (!value) {
      this.deps = null;
    }
  }

  public long getLts() {
    return this.lts;
  }

  public BatchMutateResult setLts(long lts) {
    this.lts = lts;
    setLtsIsSet(true);
    return this;
  }

  public void unsetLts() {
    __isset_bit_vector.clear(__LTS_ISSET_ID);
  }

  /** Returns true if field lts is set (has been assigned a value) and false otherwise */
  public boolean isSetLts() {
    return __isset_bit_vector.get(__LTS_ISSET_ID);
  }

  public void setLtsIsSet(boolean value) {
    __isset_bit_vector.set(__LTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEPS:
      if (value == null) {
        unsetDeps();
      } else {
        setDeps((Set<Dep>)value);
      }
      break;

    case LTS:
      if (value == null) {
        unsetLts();
      } else {
        setLts((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEPS:
      return getDeps();

    case LTS:
      return Long.valueOf(getLts());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEPS:
      return isSetDeps();
    case LTS:
      return isSetLts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchMutateResult)
      return this.equals((BatchMutateResult)that);
    return false;
  }

  public boolean equals(BatchMutateResult that) {
    if (that == null)
      return false;

    boolean this_present_deps = true && this.isSetDeps();
    boolean that_present_deps = true && that.isSetDeps();
    if (this_present_deps || that_present_deps) {
      if (!(this_present_deps && that_present_deps))
        return false;
      if (!this.deps.equals(that.deps))
        return false;
    }

    boolean this_present_lts = true;
    boolean that_present_lts = true;
    if (this_present_lts || that_present_lts) {
      if (!(this_present_lts && that_present_lts))
        return false;
      if (this.lts != that.lts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_deps = true && (isSetDeps());
    builder.append(present_deps);
    if (present_deps)
      builder.append(deps);

    boolean present_lts = true;
    builder.append(present_lts);
    if (present_lts)
      builder.append(lts);

    return builder.toHashCode();
  }

  public int compareTo(BatchMutateResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BatchMutateResult typedOther = (BatchMutateResult)other;

    lastComparison = Boolean.valueOf(isSetDeps()).compareTo(typedOther.isSetDeps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deps, typedOther.deps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLts()).compareTo(typedOther.isSetLts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lts, typedOther.lts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // DEPS
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set126 = iprot.readSetBegin();
              this.deps = new HashSet<Dep>(2*_set126.size);
              for (int _i127 = 0; _i127 < _set126.size; ++_i127)
              {
                Dep _elem128; // required
                _elem128 = new Dep();
                _elem128.read(iprot);
                this.deps.add(_elem128);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LTS
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.lts = iprot.readI64();
            setLtsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.deps != null) {
      oprot.writeFieldBegin(DEPS_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, this.deps.size()));
        for (Dep _iter129 : this.deps)
        {
          _iter129.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LTS_FIELD_DESC);
    oprot.writeI64(this.lts);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchMutateResult(");
    boolean first = true;

    sb.append("deps:");
    if (this.deps == null) {
      sb.append("null");
    } else {
      sb.append(this.deps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lts:");
    sb.append(this.lts);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

