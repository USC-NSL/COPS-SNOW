/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.thrift;
/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */


import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Basic unit of data within a ColumnFamily.
 * @param name, the name by which this column is set and retrieved.  Maximum 64KB long.
 * @param value. The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).
 * @param timestamp. The timestamp is used for conflict detection/resolution when two columns with same name need to be compared.
 * @param ttl. An optional, positive delay (in seconds) after which the column will be automatically deleted.
 */
public class Column implements org.apache.thrift.TBase<Column, Column._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Column");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DELETED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted_time", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField EARLIEST_VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("earliest_valid_time", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LATEST_VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("latest_valid_time", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TRANSACTION_COORDINATOR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionCoordinatorKey", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FIRST_ROUND_WAS_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("first_round_was_valid", org.apache.thrift.protocol.TType.BOOL, (short)9);

  public ByteBuffer name; // required
  public ByteBuffer value; // required
  public long timestamp; // required
  public int ttl; // required
  public long deleted_time; // required
  public long earliest_valid_time; // required
  public long latest_valid_time; // required
  public ByteBuffer transactionCoordinatorKey; // required
  public boolean first_round_was_valid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    VALUE((short)2, "value"),
    TIMESTAMP((short)3, "timestamp"),
    TTL((short)4, "ttl"),
    DELETED_TIME((short)5, "deleted_time"),
    EARLIEST_VALID_TIME((short)6, "earliest_valid_time"),
    LATEST_VALID_TIME((short)7, "latest_valid_time"),
    TRANSACTION_COORDINATOR_KEY((short)8, "transactionCoordinatorKey"),
    FIRST_ROUND_WAS_VALID((short)9, "first_round_was_valid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // VALUE
          return VALUE;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // TTL
          return TTL;
        case 5: // DELETED_TIME
          return DELETED_TIME;
        case 6: // EARLIEST_VALID_TIME
          return EARLIEST_VALID_TIME;
        case 7: // LATEST_VALID_TIME
          return LATEST_VALID_TIME;
        case 8: // TRANSACTION_COORDINATOR_KEY
          return TRANSACTION_COORDINATOR_KEY;
        case 9: // FIRST_ROUND_WAS_VALID
          return FIRST_ROUND_WAS_VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __TTL_ISSET_ID = 1;
  private static final int __DELETED_TIME_ISSET_ID = 2;
  private static final int __EARLIEST_VALID_TIME_ISSET_ID = 3;
  private static final int __LATEST_VALID_TIME_ISSET_ID = 4;
  private static final int __FIRST_ROUND_WAS_VALID_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELETED_TIME, new org.apache.thrift.meta_data.FieldMetaData("deleted_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EARLIEST_VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("earliest_valid_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LATEST_VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("latest_valid_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRANSACTION_COORDINATOR_KEY, new org.apache.thrift.meta_data.FieldMetaData("transactionCoordinatorKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FIRST_ROUND_WAS_VALID, new org.apache.thrift.meta_data.FieldMetaData("first_round_was_valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Column.class, metaDataMap);
  }

  public Column() {
  }

  public Column(
    ByteBuffer name)
  {
    this();
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Column(Column other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
;
    }
    if (other.isSetValue()) {
      this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
;
    }
    this.timestamp = other.timestamp;
    this.ttl = other.ttl;
    this.deleted_time = other.deleted_time;
    this.earliest_valid_time = other.earliest_valid_time;
    this.latest_valid_time = other.latest_valid_time;
    if (other.isSetTransactionCoordinatorKey()) {
      this.transactionCoordinatorKey = org.apache.thrift.TBaseHelper.copyBinary(other.transactionCoordinatorKey);
;
    }
    this.first_round_was_valid = other.first_round_was_valid;
  }

  public Column deepCopy() {
    return new Column(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.value = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setTtlIsSet(false);
    this.ttl = 0;
    setDeleted_timeIsSet(false);
    this.deleted_time = 0;
    setEarliest_valid_timeIsSet(false);
    this.earliest_valid_time = 0;
    setLatest_valid_timeIsSet(false);
    this.latest_valid_time = 0;
    this.transactionCoordinatorKey = null;
    setFirst_round_was_validIsSet(false);
    this.first_round_was_valid = false;
  }

  public byte[] getName() {
    setName(org.apache.thrift.TBaseHelper.rightSize(name));
    return name == null ? null : name.array();
  }

  public ByteBuffer bufferForName() {
    return name;
  }

  public Column setName(byte[] name) {
    setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
    return this;
  }

  public Column setName(ByteBuffer name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte[] getValue() {
    setValue(org.apache.thrift.TBaseHelper.rightSize(value));
    return value == null ? null : value.array();
  }

  public ByteBuffer bufferForValue() {
    return value;
  }

  public Column setValue(byte[] value) {
    setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
    return this;
  }

  public Column setValue(ByteBuffer value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Column setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public int getTtl() {
    return this.ttl;
  }

  public Column setTtl(int ttl) {
    this.ttl = ttl;
    setTtlIsSet(true);
    return this;
  }

  public void unsetTtl() {
    __isset_bit_vector.clear(__TTL_ISSET_ID);
  }

  /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetTtl() {
    return __isset_bit_vector.get(__TTL_ISSET_ID);
  }

  public void setTtlIsSet(boolean value) {
    __isset_bit_vector.set(__TTL_ISSET_ID, value);
  }

  public long getDeleted_time() {
    return this.deleted_time;
  }

  public Column setDeleted_time(long deleted_time) {
    this.deleted_time = deleted_time;
    setDeleted_timeIsSet(true);
    return this;
  }

  public void unsetDeleted_time() {
    __isset_bit_vector.clear(__DELETED_TIME_ISSET_ID);
  }

  /** Returns true if field deleted_time is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted_time() {
    return __isset_bit_vector.get(__DELETED_TIME_ISSET_ID);
  }

  public void setDeleted_timeIsSet(boolean value) {
    __isset_bit_vector.set(__DELETED_TIME_ISSET_ID, value);
  }

  public long getEarliest_valid_time() {
    return this.earliest_valid_time;
  }

  public Column setEarliest_valid_time(long earliest_valid_time) {
    this.earliest_valid_time = earliest_valid_time;
    setEarliest_valid_timeIsSet(true);
    return this;
  }

  public void unsetEarliest_valid_time() {
    __isset_bit_vector.clear(__EARLIEST_VALID_TIME_ISSET_ID);
  }

  /** Returns true if field earliest_valid_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliest_valid_time() {
    return __isset_bit_vector.get(__EARLIEST_VALID_TIME_ISSET_ID);
  }

  public void setEarliest_valid_timeIsSet(boolean value) {
    __isset_bit_vector.set(__EARLIEST_VALID_TIME_ISSET_ID, value);
  }

  public long getLatest_valid_time() {
    return this.latest_valid_time;
  }

  public Column setLatest_valid_time(long latest_valid_time) {
    this.latest_valid_time = latest_valid_time;
    setLatest_valid_timeIsSet(true);
    return this;
  }

  public void unsetLatest_valid_time() {
    __isset_bit_vector.clear(__LATEST_VALID_TIME_ISSET_ID);
  }

  /** Returns true if field latest_valid_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLatest_valid_time() {
    return __isset_bit_vector.get(__LATEST_VALID_TIME_ISSET_ID);
  }

  public void setLatest_valid_timeIsSet(boolean value) {
    __isset_bit_vector.set(__LATEST_VALID_TIME_ISSET_ID, value);
  }

  public byte[] getTransactionCoordinatorKey() {
    setTransactionCoordinatorKey(org.apache.thrift.TBaseHelper.rightSize(transactionCoordinatorKey));
    return transactionCoordinatorKey == null ? null : transactionCoordinatorKey.array();
  }

  public ByteBuffer bufferForTransactionCoordinatorKey() {
    return transactionCoordinatorKey;
  }

  public Column setTransactionCoordinatorKey(byte[] transactionCoordinatorKey) {
    setTransactionCoordinatorKey(transactionCoordinatorKey == null ? (ByteBuffer)null : ByteBuffer.wrap(transactionCoordinatorKey));
    return this;
  }

  public Column setTransactionCoordinatorKey(ByteBuffer transactionCoordinatorKey) {
    this.transactionCoordinatorKey = transactionCoordinatorKey;
    return this;
  }

  public void unsetTransactionCoordinatorKey() {
    this.transactionCoordinatorKey = null;
  }

  /** Returns true if field transactionCoordinatorKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionCoordinatorKey() {
    return this.transactionCoordinatorKey != null;
  }

  public void setTransactionCoordinatorKeyIsSet(boolean value) {
    if (!value) {
      this.transactionCoordinatorKey = null;
    }
  }

  public boolean isFirst_round_was_valid() {
    return this.first_round_was_valid;
  }

  public Column setFirst_round_was_valid(boolean first_round_was_valid) {
    this.first_round_was_valid = first_round_was_valid;
    setFirst_round_was_validIsSet(true);
    return this;
  }

  public void unsetFirst_round_was_valid() {
    __isset_bit_vector.clear(__FIRST_ROUND_WAS_VALID_ISSET_ID);
  }

  /** Returns true if field first_round_was_valid is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_round_was_valid() {
    return __isset_bit_vector.get(__FIRST_ROUND_WAS_VALID_ISSET_ID);
  }

  public void setFirst_round_was_validIsSet(boolean value) {
    __isset_bit_vector.set(__FIRST_ROUND_WAS_VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((ByteBuffer)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((ByteBuffer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case TTL:
      if (value == null) {
        unsetTtl();
      } else {
        setTtl((Integer)value);
      }
      break;

    case DELETED_TIME:
      if (value == null) {
        unsetDeleted_time();
      } else {
        setDeleted_time((Long)value);
      }
      break;

    case EARLIEST_VALID_TIME:
      if (value == null) {
        unsetEarliest_valid_time();
      } else {
        setEarliest_valid_time((Long)value);
      }
      break;

    case LATEST_VALID_TIME:
      if (value == null) {
        unsetLatest_valid_time();
      } else {
        setLatest_valid_time((Long)value);
      }
      break;

    case TRANSACTION_COORDINATOR_KEY:
      if (value == null) {
        unsetTransactionCoordinatorKey();
      } else {
        setTransactionCoordinatorKey((ByteBuffer)value);
      }
      break;

    case FIRST_ROUND_WAS_VALID:
      if (value == null) {
        unsetFirst_round_was_valid();
      } else {
        setFirst_round_was_valid((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case VALUE:
      return getValue();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case TTL:
      return Integer.valueOf(getTtl());

    case DELETED_TIME:
      return Long.valueOf(getDeleted_time());

    case EARLIEST_VALID_TIME:
      return Long.valueOf(getEarliest_valid_time());

    case LATEST_VALID_TIME:
      return Long.valueOf(getLatest_valid_time());

    case TRANSACTION_COORDINATOR_KEY:
      return getTransactionCoordinatorKey();

    case FIRST_ROUND_WAS_VALID:
      return Boolean.valueOf(isFirst_round_was_valid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case VALUE:
      return isSetValue();
    case TIMESTAMP:
      return isSetTimestamp();
    case TTL:
      return isSetTtl();
    case DELETED_TIME:
      return isSetDeleted_time();
    case EARLIEST_VALID_TIME:
      return isSetEarliest_valid_time();
    case LATEST_VALID_TIME:
      return isSetLatest_valid_time();
    case TRANSACTION_COORDINATOR_KEY:
      return isSetTransactionCoordinatorKey();
    case FIRST_ROUND_WAS_VALID:
      return isSetFirst_round_was_valid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Column)
      return this.equals((Column)that);
    return false;
  }

  public boolean equals(Column that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_ttl = true && this.isSetTtl();
    boolean that_present_ttl = true && that.isSetTtl();
    if (this_present_ttl || that_present_ttl) {
      if (!(this_present_ttl && that_present_ttl))
        return false;
      if (this.ttl != that.ttl)
        return false;
    }

    boolean this_present_deleted_time = true && this.isSetDeleted_time();
    boolean that_present_deleted_time = true && that.isSetDeleted_time();
    if (this_present_deleted_time || that_present_deleted_time) {
      if (!(this_present_deleted_time && that_present_deleted_time))
        return false;
      if (this.deleted_time != that.deleted_time)
        return false;
    }

    boolean this_present_earliest_valid_time = true && this.isSetEarliest_valid_time();
    boolean that_present_earliest_valid_time = true && that.isSetEarliest_valid_time();
    if (this_present_earliest_valid_time || that_present_earliest_valid_time) {
      if (!(this_present_earliest_valid_time && that_present_earliest_valid_time))
        return false;
      if (this.earliest_valid_time != that.earliest_valid_time)
        return false;
    }

    boolean this_present_latest_valid_time = true && this.isSetLatest_valid_time();
    boolean that_present_latest_valid_time = true && that.isSetLatest_valid_time();
    if (this_present_latest_valid_time || that_present_latest_valid_time) {
      if (!(this_present_latest_valid_time && that_present_latest_valid_time))
        return false;
      if (this.latest_valid_time != that.latest_valid_time)
        return false;
    }

    boolean this_present_transactionCoordinatorKey = true && this.isSetTransactionCoordinatorKey();
    boolean that_present_transactionCoordinatorKey = true && that.isSetTransactionCoordinatorKey();
    if (this_present_transactionCoordinatorKey || that_present_transactionCoordinatorKey) {
      if (!(this_present_transactionCoordinatorKey && that_present_transactionCoordinatorKey))
        return false;
      if (!this.transactionCoordinatorKey.equals(that.transactionCoordinatorKey))
        return false;
    }

    boolean this_present_first_round_was_valid = true && this.isSetFirst_round_was_valid();
    boolean that_present_first_round_was_valid = true && that.isSetFirst_round_was_valid();
    if (this_present_first_round_was_valid || that_present_first_round_was_valid) {
      if (!(this_present_first_round_was_valid && that_present_first_round_was_valid))
        return false;
      if (this.first_round_was_valid != that.first_round_was_valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_value = true && (isSetValue());
    builder.append(present_value);
    if (present_value)
      builder.append(value);

    boolean present_timestamp = true && (isSetTimestamp());
    builder.append(present_timestamp);
    if (present_timestamp)
      builder.append(timestamp);

    boolean present_ttl = true && (isSetTtl());
    builder.append(present_ttl);
    if (present_ttl)
      builder.append(ttl);

    boolean present_deleted_time = true && (isSetDeleted_time());
    builder.append(present_deleted_time);
    if (present_deleted_time)
      builder.append(deleted_time);

    boolean present_earliest_valid_time = true && (isSetEarliest_valid_time());
    builder.append(present_earliest_valid_time);
    if (present_earliest_valid_time)
      builder.append(earliest_valid_time);

    boolean present_latest_valid_time = true && (isSetLatest_valid_time());
    builder.append(present_latest_valid_time);
    if (present_latest_valid_time)
      builder.append(latest_valid_time);

    boolean present_transactionCoordinatorKey = true && (isSetTransactionCoordinatorKey());
    builder.append(present_transactionCoordinatorKey);
    if (present_transactionCoordinatorKey)
      builder.append(transactionCoordinatorKey);

    boolean present_first_round_was_valid = true && (isSetFirst_round_was_valid());
    builder.append(present_first_round_was_valid);
    if (present_first_round_was_valid)
      builder.append(first_round_was_valid);

    return builder.toHashCode();
  }

  public int compareTo(Column other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Column typedOther = (Column)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtl()).compareTo(typedOther.isSetTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, typedOther.ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted_time()).compareTo(typedOther.isSetDeleted_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted_time, typedOther.deleted_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliest_valid_time()).compareTo(typedOther.isSetEarliest_valid_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliest_valid_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliest_valid_time, typedOther.earliest_valid_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatest_valid_time()).compareTo(typedOther.isSetLatest_valid_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatest_valid_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latest_valid_time, typedOther.latest_valid_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionCoordinatorKey()).compareTo(typedOther.isSetTransactionCoordinatorKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionCoordinatorKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionCoordinatorKey, typedOther.transactionCoordinatorKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirst_round_was_valid()).compareTo(typedOther.isSetFirst_round_was_valid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_round_was_valid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_round_was_valid, typedOther.first_round_was_valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.value = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TTL
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.ttl = iprot.readI32();
            setTtlIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DELETED_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.deleted_time = iprot.readI64();
            setDeleted_timeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // EARLIEST_VALID_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.earliest_valid_time = iprot.readI64();
            setEarliest_valid_timeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // LATEST_VALID_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.latest_valid_time = iprot.readI64();
            setLatest_valid_timeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TRANSACTION_COORDINATOR_KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.transactionCoordinatorKey = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // FIRST_ROUND_WAS_VALID
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.first_round_was_valid = iprot.readBool();
            setFirst_round_was_validIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      if (isSetValue()) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBinary(this.value);
        oprot.writeFieldEnd();
      }
    }
    if (isSetTimestamp()) {
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.timestamp);
      oprot.writeFieldEnd();
    }
    if (isSetTtl()) {
      oprot.writeFieldBegin(TTL_FIELD_DESC);
      oprot.writeI32(this.ttl);
      oprot.writeFieldEnd();
    }
    if (isSetDeleted_time()) {
      oprot.writeFieldBegin(DELETED_TIME_FIELD_DESC);
      oprot.writeI64(this.deleted_time);
      oprot.writeFieldEnd();
    }
    if (isSetEarliest_valid_time()) {
      oprot.writeFieldBegin(EARLIEST_VALID_TIME_FIELD_DESC);
      oprot.writeI64(this.earliest_valid_time);
      oprot.writeFieldEnd();
    }
    if (isSetLatest_valid_time()) {
      oprot.writeFieldBegin(LATEST_VALID_TIME_FIELD_DESC);
      oprot.writeI64(this.latest_valid_time);
      oprot.writeFieldEnd();
    }
    if (this.transactionCoordinatorKey != null) {
      if (isSetTransactionCoordinatorKey()) {
        oprot.writeFieldBegin(TRANSACTION_COORDINATOR_KEY_FIELD_DESC);
        oprot.writeBinary(this.transactionCoordinatorKey);
        oprot.writeFieldEnd();
      }
    }
    if (isSetFirst_round_was_valid()) {
      oprot.writeFieldBegin(FIRST_ROUND_WAS_VALID_FIELD_DESC);
      oprot.writeBool(this.first_round_was_valid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Column(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.name, sb);
    }
    first = false;
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.value, sb);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetTtl()) {
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
    }
    if (isSetDeleted_time()) {
      if (!first) sb.append(", ");
      sb.append("deleted_time:");
      sb.append(this.deleted_time);
      first = false;
    }
    if (isSetEarliest_valid_time()) {
      if (!first) sb.append(", ");
      sb.append("earliest_valid_time:");
      sb.append(this.earliest_valid_time);
      first = false;
    }
    if (isSetLatest_valid_time()) {
      if (!first) sb.append(", ");
      sb.append("latest_valid_time:");
      sb.append(this.latest_valid_time);
      first = false;
    }
    if (isSetTransactionCoordinatorKey()) {
      if (!first) sb.append(", ");
      sb.append("transactionCoordinatorKey:");
      if (this.transactionCoordinatorKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.transactionCoordinatorKey, sb);
      }
      first = false;
    }
    if (isSetFirst_round_was_valid()) {
      if (!first) sb.append(", ");
      sb.append("first_round_was_valid:");
      sb.append(this.first_round_was_valid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

