/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.thrift;
/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */


import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @param timestamps only included from server->client, gives (a subset of) the most recent timestamp for each datacenter
 */
public class CounterColumn implements org.apache.thrift.TBase<CounterColumn, CounterColumn._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CounterColumn");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DELETED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted_time", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_TO_COORDINATOR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("timestampToCoordinatorKey", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField EARLIEST_VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("earliest_valid_time", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LATEST_VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("latest_valid_time", org.apache.thrift.protocol.TType.I64, (short)6);

  public ByteBuffer name; // required
  public long value; // required
  public long deleted_time; // required
  public Map<Long,ByteBuffer> timestampToCoordinatorKey; // required
  public long earliest_valid_time; // required
  public long latest_valid_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    VALUE((short)2, "value"),
    DELETED_TIME((short)3, "deleted_time"),
    TIMESTAMP_TO_COORDINATOR_KEY((short)4, "timestampToCoordinatorKey"),
    EARLIEST_VALID_TIME((short)5, "earliest_valid_time"),
    LATEST_VALID_TIME((short)6, "latest_valid_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // VALUE
          return VALUE;
        case 3: // DELETED_TIME
          return DELETED_TIME;
        case 4: // TIMESTAMP_TO_COORDINATOR_KEY
          return TIMESTAMP_TO_COORDINATOR_KEY;
        case 5: // EARLIEST_VALID_TIME
          return EARLIEST_VALID_TIME;
        case 6: // LATEST_VALID_TIME
          return LATEST_VALID_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALUE_ISSET_ID = 0;
  private static final int __DELETED_TIME_ISSET_ID = 1;
  private static final int __EARLIEST_VALID_TIME_ISSET_ID = 2;
  private static final int __LATEST_VALID_TIME_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETED_TIME, new org.apache.thrift.meta_data.FieldMetaData("deleted_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP_TO_COORDINATOR_KEY, new org.apache.thrift.meta_data.FieldMetaData("timestampToCoordinatorKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "LamportTimestamp"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.EARLIEST_VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("earliest_valid_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LATEST_VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("latest_valid_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CounterColumn.class, metaDataMap);
  }

  public CounterColumn() {
    this.deleted_time = 0L;

  }

  public CounterColumn(
    ByteBuffer name,
    long value)
  {
    this();
    this.name = name;
    this.value = value;
    setValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CounterColumn(CounterColumn other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
;
    }
    this.value = other.value;
    this.deleted_time = other.deleted_time;
    if (other.isSetTimestampToCoordinatorKey()) {
      Map<Long,ByteBuffer> __this__timestampToCoordinatorKey = new HashMap<Long,ByteBuffer>();
      for (Map.Entry<Long, ByteBuffer> other_element : other.timestampToCoordinatorKey.entrySet()) {

        Long other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        Long __this__timestampToCoordinatorKey_copy_key = other_element_key;

        ByteBuffer __this__timestampToCoordinatorKey_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

        __this__timestampToCoordinatorKey.put(__this__timestampToCoordinatorKey_copy_key, __this__timestampToCoordinatorKey_copy_value);
      }
      this.timestampToCoordinatorKey = __this__timestampToCoordinatorKey;
    }
    this.earliest_valid_time = other.earliest_valid_time;
    this.latest_valid_time = other.latest_valid_time;
  }

  public CounterColumn deepCopy() {
    return new CounterColumn(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setValueIsSet(false);
    this.value = 0;
    this.deleted_time = 0L;

    this.timestampToCoordinatorKey = null;
    setEarliest_valid_timeIsSet(false);
    this.earliest_valid_time = 0;
    setLatest_valid_timeIsSet(false);
    this.latest_valid_time = 0;
  }

  public byte[] getName() {
    setName(org.apache.thrift.TBaseHelper.rightSize(name));
    return name == null ? null : name.array();
  }

  public ByteBuffer bufferForName() {
    return name;
  }

  public CounterColumn setName(byte[] name) {
    setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
    return this;
  }

  public CounterColumn setName(ByteBuffer name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getValue() {
    return this.value;
  }

  public CounterColumn setValue(long value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bit_vector.clear(__VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return __isset_bit_vector.get(__VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bit_vector.set(__VALUE_ISSET_ID, value);
  }

  public long getDeleted_time() {
    return this.deleted_time;
  }

  public CounterColumn setDeleted_time(long deleted_time) {
    this.deleted_time = deleted_time;
    setDeleted_timeIsSet(true);
    return this;
  }

  public void unsetDeleted_time() {
    __isset_bit_vector.clear(__DELETED_TIME_ISSET_ID);
  }

  /** Returns true if field deleted_time is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted_time() {
    return __isset_bit_vector.get(__DELETED_TIME_ISSET_ID);
  }

  public void setDeleted_timeIsSet(boolean value) {
    __isset_bit_vector.set(__DELETED_TIME_ISSET_ID, value);
  }

  public int getTimestampToCoordinatorKeySize() {
    return (this.timestampToCoordinatorKey == null) ? 0 : this.timestampToCoordinatorKey.size();
  }

  public void putToTimestampToCoordinatorKey(long key, ByteBuffer val) {
    if (this.timestampToCoordinatorKey == null) {
      this.timestampToCoordinatorKey = new HashMap<Long,ByteBuffer>();
    }
    this.timestampToCoordinatorKey.put(key, val);
  }

  public Map<Long,ByteBuffer> getTimestampToCoordinatorKey() {
    return this.timestampToCoordinatorKey;
  }

  public CounterColumn setTimestampToCoordinatorKey(Map<Long,ByteBuffer> timestampToCoordinatorKey) {
    this.timestampToCoordinatorKey = timestampToCoordinatorKey;
    return this;
  }

  public void unsetTimestampToCoordinatorKey() {
    this.timestampToCoordinatorKey = null;
  }

  /** Returns true if field timestampToCoordinatorKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestampToCoordinatorKey() {
    return this.timestampToCoordinatorKey != null;
  }

  public void setTimestampToCoordinatorKeyIsSet(boolean value) {
    if (!value) {
      this.timestampToCoordinatorKey = null;
    }
  }

  public long getEarliest_valid_time() {
    return this.earliest_valid_time;
  }

  public CounterColumn setEarliest_valid_time(long earliest_valid_time) {
    this.earliest_valid_time = earliest_valid_time;
    setEarliest_valid_timeIsSet(true);
    return this;
  }

  public void unsetEarliest_valid_time() {
    __isset_bit_vector.clear(__EARLIEST_VALID_TIME_ISSET_ID);
  }

  /** Returns true if field earliest_valid_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliest_valid_time() {
    return __isset_bit_vector.get(__EARLIEST_VALID_TIME_ISSET_ID);
  }

  public void setEarliest_valid_timeIsSet(boolean value) {
    __isset_bit_vector.set(__EARLIEST_VALID_TIME_ISSET_ID, value);
  }

  public long getLatest_valid_time() {
    return this.latest_valid_time;
  }

  public CounterColumn setLatest_valid_time(long latest_valid_time) {
    this.latest_valid_time = latest_valid_time;
    setLatest_valid_timeIsSet(true);
    return this;
  }

  public void unsetLatest_valid_time() {
    __isset_bit_vector.clear(__LATEST_VALID_TIME_ISSET_ID);
  }

  /** Returns true if field latest_valid_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLatest_valid_time() {
    return __isset_bit_vector.get(__LATEST_VALID_TIME_ISSET_ID);
  }

  public void setLatest_valid_timeIsSet(boolean value) {
    __isset_bit_vector.set(__LATEST_VALID_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((ByteBuffer)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Long)value);
      }
      break;

    case DELETED_TIME:
      if (value == null) {
        unsetDeleted_time();
      } else {
        setDeleted_time((Long)value);
      }
      break;

    case TIMESTAMP_TO_COORDINATOR_KEY:
      if (value == null) {
        unsetTimestampToCoordinatorKey();
      } else {
        setTimestampToCoordinatorKey((Map<Long,ByteBuffer>)value);
      }
      break;

    case EARLIEST_VALID_TIME:
      if (value == null) {
        unsetEarliest_valid_time();
      } else {
        setEarliest_valid_time((Long)value);
      }
      break;

    case LATEST_VALID_TIME:
      if (value == null) {
        unsetLatest_valid_time();
      } else {
        setLatest_valid_time((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case VALUE:
      return Long.valueOf(getValue());

    case DELETED_TIME:
      return Long.valueOf(getDeleted_time());

    case TIMESTAMP_TO_COORDINATOR_KEY:
      return getTimestampToCoordinatorKey();

    case EARLIEST_VALID_TIME:
      return Long.valueOf(getEarliest_valid_time());

    case LATEST_VALID_TIME:
      return Long.valueOf(getLatest_valid_time());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case VALUE:
      return isSetValue();
    case DELETED_TIME:
      return isSetDeleted_time();
    case TIMESTAMP_TO_COORDINATOR_KEY:
      return isSetTimestampToCoordinatorKey();
    case EARLIEST_VALID_TIME:
      return isSetEarliest_valid_time();
    case LATEST_VALID_TIME:
      return isSetLatest_valid_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CounterColumn)
      return this.equals((CounterColumn)that);
    return false;
  }

  public boolean equals(CounterColumn that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    boolean this_present_deleted_time = true && this.isSetDeleted_time();
    boolean that_present_deleted_time = true && that.isSetDeleted_time();
    if (this_present_deleted_time || that_present_deleted_time) {
      if (!(this_present_deleted_time && that_present_deleted_time))
        return false;
      if (this.deleted_time != that.deleted_time)
        return false;
    }

    boolean this_present_timestampToCoordinatorKey = true && this.isSetTimestampToCoordinatorKey();
    boolean that_present_timestampToCoordinatorKey = true && that.isSetTimestampToCoordinatorKey();
    if (this_present_timestampToCoordinatorKey || that_present_timestampToCoordinatorKey) {
      if (!(this_present_timestampToCoordinatorKey && that_present_timestampToCoordinatorKey))
        return false;
      if (!this.timestampToCoordinatorKey.equals(that.timestampToCoordinatorKey))
        return false;
    }

    boolean this_present_earliest_valid_time = true && this.isSetEarliest_valid_time();
    boolean that_present_earliest_valid_time = true && that.isSetEarliest_valid_time();
    if (this_present_earliest_valid_time || that_present_earliest_valid_time) {
      if (!(this_present_earliest_valid_time && that_present_earliest_valid_time))
        return false;
      if (this.earliest_valid_time != that.earliest_valid_time)
        return false;
    }

    boolean this_present_latest_valid_time = true && this.isSetLatest_valid_time();
    boolean that_present_latest_valid_time = true && that.isSetLatest_valid_time();
    if (this_present_latest_valid_time || that_present_latest_valid_time) {
      if (!(this_present_latest_valid_time && that_present_latest_valid_time))
        return false;
      if (this.latest_valid_time != that.latest_valid_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_value = true;
    builder.append(present_value);
    if (present_value)
      builder.append(value);

    boolean present_deleted_time = true && (isSetDeleted_time());
    builder.append(present_deleted_time);
    if (present_deleted_time)
      builder.append(deleted_time);

    boolean present_timestampToCoordinatorKey = true && (isSetTimestampToCoordinatorKey());
    builder.append(present_timestampToCoordinatorKey);
    if (present_timestampToCoordinatorKey)
      builder.append(timestampToCoordinatorKey);

    boolean present_earliest_valid_time = true && (isSetEarliest_valid_time());
    builder.append(present_earliest_valid_time);
    if (present_earliest_valid_time)
      builder.append(earliest_valid_time);

    boolean present_latest_valid_time = true && (isSetLatest_valid_time());
    builder.append(present_latest_valid_time);
    if (present_latest_valid_time)
      builder.append(latest_valid_time);

    return builder.toHashCode();
  }

  public int compareTo(CounterColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CounterColumn typedOther = (CounterColumn)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted_time()).compareTo(typedOther.isSetDeleted_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted_time, typedOther.deleted_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestampToCoordinatorKey()).compareTo(typedOther.isSetTimestampToCoordinatorKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestampToCoordinatorKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestampToCoordinatorKey, typedOther.timestampToCoordinatorKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliest_valid_time()).compareTo(typedOther.isSetEarliest_valid_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliest_valid_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliest_valid_time, typedOther.earliest_valid_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatest_valid_time()).compareTo(typedOther.isSetLatest_valid_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatest_valid_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latest_valid_time, typedOther.latest_valid_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.value = iprot.readI64();
            setValueIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DELETED_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.deleted_time = iprot.readI64();
            setDeleted_timeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TIMESTAMP_TO_COORDINATOR_KEY
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
              this.timestampToCoordinatorKey = new HashMap<Long,ByteBuffer>(2*_map4.size);
              for (int _i5 = 0; _i5 < _map4.size; ++_i5)
              {
                long _key6; // required
                ByteBuffer _val7; // required
                _key6 = iprot.readI64();
                _val7 = iprot.readBinary();
                this.timestampToCoordinatorKey.put(_key6, _val7);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // EARLIEST_VALID_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.earliest_valid_time = iprot.readI64();
            setEarliest_valid_timeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // LATEST_VALID_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.latest_valid_time = iprot.readI64();
            setLatest_valid_timeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(VALUE_FIELD_DESC);
    oprot.writeI64(this.value);
    oprot.writeFieldEnd();
    if (isSetDeleted_time()) {
      oprot.writeFieldBegin(DELETED_TIME_FIELD_DESC);
      oprot.writeI64(this.deleted_time);
      oprot.writeFieldEnd();
    }
    if (this.timestampToCoordinatorKey != null) {
      if (isSetTimestampToCoordinatorKey()) {
        oprot.writeFieldBegin(TIMESTAMP_TO_COORDINATOR_KEY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, this.timestampToCoordinatorKey.size()));
          for (Map.Entry<Long, ByteBuffer> _iter8 : this.timestampToCoordinatorKey.entrySet())
          {
            oprot.writeI64(_iter8.getKey());
            oprot.writeBinary(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetEarliest_valid_time()) {
      oprot.writeFieldBegin(EARLIEST_VALID_TIME_FIELD_DESC);
      oprot.writeI64(this.earliest_valid_time);
      oprot.writeFieldEnd();
    }
    if (isSetLatest_valid_time()) {
      oprot.writeFieldBegin(LATEST_VALID_TIME_FIELD_DESC);
      oprot.writeI64(this.latest_valid_time);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CounterColumn(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.name, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    if (isSetDeleted_time()) {
      if (!first) sb.append(", ");
      sb.append("deleted_time:");
      sb.append(this.deleted_time);
      first = false;
    }
    if (isSetTimestampToCoordinatorKey()) {
      if (!first) sb.append(", ");
      sb.append("timestampToCoordinatorKey:");
      if (this.timestampToCoordinatorKey == null) {
        sb.append("null");
      } else {
        sb.append(this.timestampToCoordinatorKey);
      }
      first = false;
    }
    if (isSetEarliest_valid_time()) {
      if (!first) sb.append(", ");
      sb.append("earliest_valid_time:");
      sb.append(this.earliest_valid_time);
      first = false;
    }
    if (isSetLatest_valid_time()) {
      if (!first) sb.append(", ");
      sb.append("latest_valid_time:");
      sb.append(this.latest_valid_time);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'value' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

